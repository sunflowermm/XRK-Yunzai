# ========================================
#      反向代理服务器配置文件
# ========================================
# 本配置文件控制HTTP/HTTPS服务器和反向代理的行为

# ----------------------------------------
#            基础配置
# ----------------------------------------
server:
  # 服务器名称（将显示在日志中）
  name: "XRK Proxy Server"
  
  # Bot内部服务监听地址
  # Bot服务将监听在随机高端口上，仅供内部使用
  host: "127.0.0.1"
  
  # 外部访问URL（可选）
  # 用于生成完整的访问链接，留空则自动检测
  # 这是Bot服务的对外URL，通过反向代理访问
  url: "http://127.0.0.1"

# ----------------------------------------
#         反向代理配置（核心功能）
# ----------------------------------------
proxy:
  # 是否启用反向代理功能
  # 启用后将监听80和443端口，提供域名路由和反向代理
  enabled: false
  
  # 域名配置列表
  # 每个域名可以独立配置SSL证书、路由规则等
  domains:
    # ======== 主域名配置 ========
    - # 域名（必需）
      # 支持精确匹配和通配符（*.example.com）
      domain: "xrkk.cc"
      
      # 类型（必需）
      # - local: 代理到本地Bot服务
      # - proxy: 反向代理到其他服务器
      # - static: 静态文件服务
      type: "local"
      
      # 目标地址（type为proxy时必需）
      # 示例: http://localhost:3000
      # target: ""
      
      # 路径重写规则（可选）
      # 格式: { "原路径规则": "新路径" }
      # 支持正则表达式
      pathRewrite: {}
      
      # 自定义请求头（可选）
      # 添加到代理请求中的额外头部
      headers: {}
      
      # 是否启用WebSocket支持
      ws: true
      
      # 是否启用CORS（跨域资源共享）
      corsEnabled: false
      
      # SSL证书配置（可选，用于HTTPS）
      ssl:
        # 证书文件路径（PEM格式）
        cert: "/path/to/xrkk.cc/fullchain.pem"
        # 私钥文件路径
        key: "/path/to/xrkk.cc/privkey.pem"
        # CA证书链（可选）
        ca: ""
    
    # ======== 子域名配置示例 ========
    # - # XRK子域名 - 将/xrk路径映射为根目录
    #   domain: "xrk.xrkk.cc"
    #   type: "local"
    #   
    #   # 路径重写：访问 xrk.xrkk.cc/ 实际访问 /xrk/
    #   pathRewrite:
    #     "^/": "/xrk/"
    #   
    #   # 独立的SSL证书
    #   ssl:
    #     cert: "/path/to/xrk.xrkk.cc/fullchain.pem"
    #     key: "/path/to/xrk.xrkk.cc/privkey.pem"
    #   
    #   ws: true
    
    # ======== API子域名示例 ========
    # - domain: "api.xrkk.cc"
    #   type: "local"
    #   
    #   # API路径直接映射
    #   pathRewrite:
    #     "^/": "/api/"
    #   
    #   # API专用配置
    #   corsEnabled: true  # API通常需要CORS
    #   
    #   # 自定义头部
    #   headers:
    #     "X-API-Version": "v2"
    #     "X-Powered-By": "XRK-Server"
    #   
    #   ssl:
    #     cert: "/path/to/api.xrkk.cc/fullchain.pem"
    #     key: "/path/to/api.xrkk.cc/privkey.pem"
    
    # ======== 静态资源域名示例 ========
    # - domain: "static.xrkk.cc"
    #   type: "static"
    #   
    #   # 静态文件根目录
    #   root: "www/static"
    #   
    #   # 不需要WebSocket
    #   ws: false
    #   
    #   ssl:
    #     cert: "/path/to/static.xrkk.cc/fullchain.pem"
    #     key: "/path/to/static.xrkk.cc/privkey.pem"
    
    # ======== 通配符域名示例 ========
    # - # 所有子域名都代理到同一服务
    #   domain: "*.app.xrkk.cc"
    #   type: "proxy"
    #   
    #   # 代理到另一个服务
    #   target: "http://localhost:8080"
    #   
    #   # 保持原始主机头
    #   changeOrigin: false
    #   
    #   # 通配符SSL证书
    #   ssl:
    #     cert: "/path/to/wildcard.app.xrkk.cc/fullchain.pem"
    #     key: "/path/to/wildcard.app.xrkk.cc/privkey.pem"
    
    # ======== 外部服务反向代理示例 ========
    # - domain: "blog.xrkk.cc"
    #   type: "proxy"
    #   
    #   # 代理到外部博客服务
    #   target: "http://blog-server:2368"
    #   
    #   # 修改Origin头部
    #   changeOrigin: true
    #   
    #   # 路径保持不变
    #   pathRewrite: {}
    #   
    #   ssl:
    #     cert: "/path/to/blog.xrkk.cc/fullchain.pem"
    #     key: "/path/to/blog.xrkk.cc/privkey.pem"
  
  # 全局代理配置
  globalOptions:
    # 超时设置（毫秒）
    timeout: 30000
    
    # 是否跟随重定向
    followRedirects: false
    
    # 最大重定向次数
    maxRedirects: 5
    
    # 是否验证SSL证书（代理到HTTPS时）
    rejectUnauthorized: true

# ----------------------------------------
#         Bot服务HTTPS配置
# ----------------------------------------
# 注意：这是Bot内部服务的HTTPS，不是反向代理的HTTPS
https:
  # 是否为Bot服务启用HTTPS
  # 通常不需要，因为有反向代理处理SSL
  enabled: false
  
  # Bot服务的SSL证书（如果启用）
  certificate:
    key: ""
    cert: ""
    ca: ""

# ----------------------------------------
#            静态文件服务
# ----------------------------------------
static:
  # 默认首页文件列表
  index:
    - "index.html"
    - "index.htm"
    - "default.html"
  
  # 是否允许自动添加扩展名
  extensions: false
  
  # 缓存时间设置
  cache:
    static: 86400     # CSS/JS文件（1天）
    images: 604800    # 图片文件（7天）
  
  # 缓存总时间
  cacheTime: "1d"

# ----------------------------------------
#            安全配置
# ----------------------------------------
security:
  # Helmet安全头配置
  helmet:
    enabled: true
  
  # 隐藏文件/目录模式
  hiddenFiles:
    - "^\\..*"        # 所有点开头的文件
    - "node_modules"  # Node.js依赖目录
    - "\\.git"        # Git版本控制目录
    - "\\.env"        # 环境变量文件
    - "config/"       # 配置目录
    - "private/"      # 私有目录

# ----------------------------------------
#         跨域资源共享（CORS）
# ----------------------------------------
cors:
  # 全局CORS配置（Bot服务）
  enabled: true
  origins: ["*"]
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  headers: ["Content-Type", "Authorization", "X-API-Key"]
  credentials: false
  maxAge: 86400

# ----------------------------------------
#            认证配置
# ----------------------------------------
auth:
  # API密钥配置
  apiKey:
    enabled: true
    file: "config/server_config/api_key.json"
    length: 64
  
  # 无需认证的路径（白名单）
  whitelist:
    - "/"
    - "/favicon.ico"
    - "/health"
    - "/status"
    - "/robots.txt"
    - "/xrk/*"
    - "/media/*"
    - "/uploads/*"

# ----------------------------------------
#            速率限制
# ----------------------------------------
rateLimit:
  # 是否启用速率限制
  enabled: true
  
  # 全局限制
  global:
    windowMs: 900000  # 15分钟
    max: 1000
    message: "请求过于频繁，请稍后再试"
  
  # API接口限制
  api:
    windowMs: 60000   # 1分钟
    max: 60
    message: "API请求过于频繁"

# ----------------------------------------
#            请求限制
# ----------------------------------------
limits:
  urlencoded: "10mb"
  json: "10mb"
  raw: "50mb"
  text: "10mb"
  fileSize: "100mb"

# ----------------------------------------
#            压缩配置
# ----------------------------------------
compression:
  enabled: true
  level: 6
  threshold: 1024

# ----------------------------------------
#            日志配置
# ----------------------------------------
logging:
  # 请求日志
  requests: true
  
  # 错误日志
  errors: true
  
  # 调试日志
  debug: false
  
  # 静默路径（避免刷屏）
  quiet:
    - "/health"
    - "/favicon.ico"
    - "/robots.txt"

# ----------------------------------------
#            其他配置
# ----------------------------------------
misc:
  # 是否自动检测公网IP
  detectPublicIP: true
  
  # 404时的默认重定向路径
  defaultRoute: "/"

# ----------------------------------------
#            配置示例说明
# ----------------------------------------
# 使用示例：
# 
# 1. 基本域名代理（主站）
#    - 访问: https://xrkk.cc
#    - 实际: 本地Bot服务的www目录
#
# 2. 子域名路径映射
#    - 访问: https://xrk.xrkk.cc/
#    - 实际: 本地Bot服务的/xrk/路径
#
# 3. API子域名
#    - 访问: https://api.xrkk.cc/v2/user
#    - 实际: 本地Bot服务的/api/v2/user
#
# 4. 静态资源域名
#    - 访问: https://static.xrkk.cc/images/logo.png
#    - 实际: www/static/images/logo.png文件
#
# 5. 反向代理外部服务
#    - 访问: https://blog.xrkk.cc
#    - 实际: 代理到blog-server:2368
#
# ----------------------------------------
#            SSL证书获取建议
# ----------------------------------------
# 推荐使用 Let's Encrypt 免费SSL证书
# 
# 安装 Certbot:
#   Ubuntu/Debian: sudo apt-get install certbot
#   CentOS/RHEL: sudo yum install certbot
#
# 获取证书（需要先停止占用80端口的服务）:
#   certbot certonly --standalone -d xrkk.cc -d www.xrkk.cc
#   certbot certonly --standalone -d xrk.xrkk.cc
#   certbot certonly --standalone -d api.xrkk.cc
#
# 通配符证书（需要DNS验证）:
#   certbot certonly --manual --preferred-challenges dns -d "*.xrkk.cc"
#
# 证书位置:
#   /etc/letsencrypt/live/域名/fullchain.pem  (证书)
#   /etc/letsencrypt/live/域名/privkey.pem    (私钥)
#
# 自动续期（添加到crontab）:
#   0 0 1 * * certbot renew --quiet --post-hook "pm2 restart bot"
#
# ----------------------------------------
#            部署建议
# ----------------------------------------
# 1. 使用PM2管理进程：
#    pm2 start app.js --name bot-proxy
#    pm2 save
#    pm2 startup
#
# 2. 确保防火墙开放端口：
#    sudo ufw allow 80/tcp
#    sudo ufw allow 443/tcp
#
# 3. 使用root权限或端口转发：
#    方法1: sudo node app.js
#    方法2: 使用setcap允许Node.js绑定低端口
#           sudo setcap 'cap_net_bind_service=+ep' $(which node)
#
# 4. 日志管理：
#    建议配置日志轮转避免日志文件过大
#
# ----------------------------------------